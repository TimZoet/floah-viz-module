#pragma once

////////////////////////////////////////////////////////////////
// Module includes.
////////////////////////////////////////////////////////////////

#include "sol/mesh/fwd.h"

////////////////////////////////////////////////////////////////
// Current target includes.
////////////////////////////////////////////////////////////////

#include "floah-viz/font_map.h"

namespace floah
{
    class Generator
    {
    public:
        ////////////////////////////////////////////////////////////////
        // Types.
        ////////////////////////////////////////////////////////////////

        struct Params
        {
            sol::MeshManager& meshManager;
            FontMap&          fontMap;

            /**
             * \brief If not null, update mesh instead of creating new one.
             */
            sol::IMesh* mesh = nullptr;
        };

        ////////////////////////////////////////////////////////////////
        // Constructors.
        ////////////////////////////////////////////////////////////////

        Generator() = default;

        Generator(const Generator&) = delete;

        Generator(Generator&&) noexcept = delete;

        virtual ~Generator() noexcept = default;

        Generator& operator=(const Generator&) = delete;

        Generator& operator=(Generator&&) noexcept = delete;

        ////////////////////////////////////////////////////////////////
        // Generate.
        ////////////////////////////////////////////////////////////////

        [[nodiscard]] virtual sol::IMesh& generate(Params& params) = 0;
    };
}  // namespace floah
